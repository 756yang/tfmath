快速log算法：
atanh(x)=0.5log((1+x)/(1-x))=x+x^3/3+x^5/5+x^7/7+x^9/9
log(x)=2atanh((x-1)/(x+1))
设x=a*2^e，那么log(x)=log(a)+e*log(2);
计算log(a), a in [sqrt(2)/2,sqrt(2)], 对应atanh(x), x in [-0.1716,0.1716]
需要将之展开到x^7/7，即atanh(x)=x+x^3/3+x^5/5+x^7/7，满足float精度要求
需要将之展开到x^15/15，即atanh(x)=x^15/15+x^13/13+x^11/11+x^9/9+x^7/7+x^5/5+x^3/3+x，满足double精度要求

[旧版]快速开方根迭代算法：(用于开n次方)
对x开n次方,把x视为常数,设初始误差为d,那么初始值为z=root(n,x)*(1+d),设函数f(z)为迭代算式，求解f(z).
迭代後误差为dz=f(z)/root(n,x)-1,设此为g(d),此函数与x的取值无关,通过构造g(d)可以得到f(z).
f(z)=root(n,x)*(1+g(d))=root(n,x)*(1+g(z/root(n,x)-1))=F(x,z),F(x,z)的求值需要在有限四则运算范围内得到。
构造g(d),很明显,此多项式的阶数越高则迭代越优,假设进行开平方,希望g(d)为3阶,为使对应的F(x,z)利于计算,得到了:
g(d)=d^3/(3*d^2+6*d+4),对应的F(x,z)=z*(z^2+3*x)/(3*z^3+x).
注意，并不是g(d)越阶数越高越好，考虑到对应的F(x,z)不能过于复杂，一般只取2或3阶的g(d).

[优化版]快速开方根迭代算法：(用于开n次方)
这种算法的思路不是使一次迭代的精度最高，而是避免低效的除法，之前所述的算法构造迭代函数时很可能引入除法。
函数f(x),初始估值f0=f(x)*(1+d),误差为d=f0/f(x)-1,设迭代函数F(x,f0),则迭代後误差为F(x,f0)/f(x)-1.
假设f0=f(a*x),如果迭代一次得到精确解,则假设F(x,f0)=f(a*x)*g(a)=f(x),这个式子对于任意a,x都成立。
设h(a)=1/g(a),则f(a*x)=f(x)*h(a),同样地,f(x*a)=f(a)*h(x),得出f(x)/h(x)=k,故而h(a*x)=h(a)*h(x),
这样的式子只对幂函数成立,故h(a)=a^n,同样f(x)=k*x^n,这说明这种迭代方法只适用于幂函数,且只适用于易求反函数的情况。
f0=f(a*x) -> a=f<-1>(f0)/x,现将之推导出普适的开方根算法：
f(x)=root(n,x), f0=root(n,x)*(1+d), a=f0^n/x, F(x,f0)=f0*g(a) -> g(a) ~ 1/root(n,a).
很明显,只能采取有限项逼近g(a),令g(a)=a0+a1*a,
d=f0/root(n,x)-1, a=f0^n/x=(1+d)^n, 迭代後误差为fd=F(x,f0)/f(x)-1=root(n,a)*g(a)-1=(1+d)*g((1+d)^n)-1.
struct2mat(solve([d==0,diff(fd,d,0),diff(fd,d,1)],[d a0 a1]))
解得：a0=(n + 1)/n, a1=-1/n
于是迭代函数为F(x,f0)=f0*(1+1/n-1/n*f0^n/x), 同理可求二阶迭代函数为：
F(x,f0)=f0/(2*n*n)*((2*n+1)*(n+1)-(4*n+2)*(f0^n/x)+(n+1)*(f0^n/x)^2).
为避免开方根算法中出现除法,只需要先求方根倒数,然後对方根倒数进行迭代,最後回到对方根的迭代。
如果用上述迭代函数进行最後的方根迭代,会进行多余的幂运算,可以考虑优化：
求出的方根倒数估值为t=(1+d)/root(n,x), 那么方根估值为rx=t^(n-1)*x=(1+d)^(n-1)*root(n,x),
方根误差为dd=(1+d)^(n-1)-1, rx=(1+dd)*root(n,x). F(x,rx)=rx*h(z), z=t*rx=t^n*x=(1+d)^n=(1+dd)^(n/(n-1)).
fd=(1+dd)*h((1+dd)^(n/(n-1)))-1, 设h(z)=a0+a1*z, 解得：struct2mat(solve([dd==0,diff(fd,dd,0),diff(fd,dd,1)],[dd a0 a1]))
a0=(2*n - 1)/n, a1=-(n - 1)/n. 那么：F(x,rx)=rx/n*(2*n-1-(n-1)*rx*t).
对应的二阶迭代为：F(x,rx)=rx/(2*n*n)*((2*n-1)*(3*n-1)-2*(3*n - 1)*(n - 1)*(t*rx)+(2*n - 1)*(n - 1)*(t*rx)^2).
考虑到高阶迭代一般比低阶迭代更高效(迭代需先计算z=f0^n/x,高阶迭代只需计算一次,低阶迭代需计算多次),
先用一阶迭代得出较准确的方根倒数，在精度足够好的情况下,直接使用满足精度的高阶迭代,最後用一阶迭代得出方根。
方根倒数的迭代系数：
一阶迭代：[a0;a1]
[(n + 1)/n
      -1/n]
二阶迭代：[a0;a1;a2]
[(2*n^2 + 3*n + 1)/(2*n^2)
            -(2*n + 1)/n^2
           (n + 1)/(2*n^2)]
三阶迭代：[a0;a1;a2;a3]
[(6*n^3 + 11*n^2 + 6*n + 1)/(6*n^3)
         -(6*n^2 + 5*n + 1)/(2*n^3)
          (3*n^2 + 4*n + 1)/(2*n^3)
         -(2*n^2 + 3*n + 1)/(6*n^3)]
四阶迭代：[a0;a1;a2;a3;a4]
[(24*n^4 + 50*n^3 + 35*n^2 + 10*n + 1)/(24*n^4)
           -(24*n^3 + 26*n^2 + 9*n + 1)/(6*n^4)
            (12*n^3 + 19*n^2 + 8*n + 1)/(4*n^4)
            -(8*n^3 + 14*n^2 + 7*n + 1)/(6*n^4)
            (6*n^3 + 11*n^2 + 6*n + 1)/(24*n^4)]
五阶迭代：[a0;a1;a2;a3;a4;a5]
[(120*n^5 + 274*n^4 + 225*n^3 + 85*n^2 + 15*n + 1)/(120*n^5)
           -(120*n^4 + 154*n^3 + 71*n^2 + 14*n + 1)/(24*n^5)
             (60*n^4 + 107*n^3 + 59*n^2 + 13*n + 1)/(12*n^5)
             -(40*n^4 + 78*n^3 + 49*n^2 + 12*n + 1)/(12*n^5)
              (30*n^4 + 61*n^3 + 41*n^2 + 11*n + 1)/(24*n^5)
            -(24*n^4 + 50*n^3 + 35*n^2 + 10*n + 1)/(120*n^5)]
六阶迭代：[a0;a1;a2;a3;a4;a5;a6]
[(720*n^6 + 1764*n^5 + 1624*n^4 + 735*n^3 + 175*n^2 + 21*n + 1)/(720*n^6)
           -(720*n^5 + 1044*n^4 + 580*n^3 + 155*n^2 + 20*n + 1)/(120*n^6)
              (360*n^5 + 702*n^4 + 461*n^3 + 137*n^2 + 19*n + 1)/(48*n^6)
             -(240*n^5 + 508*n^4 + 372*n^3 + 121*n^2 + 18*n + 1)/(36*n^6)
              (180*n^5 + 396*n^4 + 307*n^3 + 107*n^2 + 17*n + 1)/(48*n^6)
             -(144*n^5 + 324*n^4 + 260*n^3 + 95*n^2 + 16*n + 1)/(120*n^6)
              (120*n^5 + 274*n^4 + 225*n^3 + 85*n^2 + 15*n + 1)/(720*n^6)]
方根迭代的系数：
一阶迭代：[a0;a1]
[(2*n - 1)/n
  -(n - 1)/n]
二阶迭代：[a0;a1;a2]
[  (6*n^2 - 5*n + 1)/(2*n^2)
    -((3*n - 1)*(n - 1))/n^2
 ((2*n - 1)*(n - 1))/(2*n^2)]

%matlab计算迭代系数：
k=2;%系数个数
syms d n;
a=sym('a',[1,k]);
h=@(z)(z.^(0:1:k-1))*a.';
fd=(1+d)*h((1+d)^n)-1;%方根倒数迭代误差
%fd=(1+d)*h((1+d)^(n/(n-1)))-1;%方根迭代误差
formula=sym(zeros(1,k+1));
formula(1)=sym(d==0);
for it = 1:k
  formula(it+1)=diff(fd,d,it-1);
end
AA=struct2mat(solve(formula,[d a]))
%matlab计算误差函数：
m=n;%根号次数
fn=matlabFunction(AA(2:k+1));%迭代系数
h=@(z)(z.^(0:1:k-1))*sym(fn(m));
fd=simplify(expand((1+d)*h((1+d)^m)-1)) %方根倒数迭代误差
%fd=simplify(expand((1+d)*h((1+d)^(m/(m-1)))-1)) %方根迭代误差
gd=matlabFunction(fd);%迭代误差函数
dd=matlabFunction((1+d)^(m-1)-1);%方根倒数计算方根的误差函数



syms x p1 q1 q2;
f=(1-exp(-x)-2*x*exp(-x)*(x*x+p1)/(q1*x*x+q2-x*x*x-x*p1))^2;
y=taylor(f,x,0,'Order',12);
ff=matlabFunction(f);
yy=matlabFunction(y);
fy=matlabFunction(f-y);
pq=[p1 q1 q2];
h=int(y,x,-0.5*log(2),0.5*log(2));
//数值解法解不出来
ret=vpasolve(vpa(jacobian(h,pq),20),pq);
struct2mat(ret)

df=matlabFunction(sqrt(h/log(2)));//计算平均误差
//计算不出准确的最小值点
func=matlabFunction(h,'Vars',{pq});
options = optimoptions(@fminunc,'Display','iter','Algorithm','quasi-newton');
[ret,fval]=fminunc(func,[60 12 120],options);
故而放弃用matlab求解最优参数，采用程序计算。

[num,den]=numden(y);
num=coeffs(num);
den=coeffs(den);

%双精度指数运算采用多项分式逼近
syms x;
f=exp(x);
y=pade((f-1)/2,'Order',[5,6]);
fy=matlabFunction((f-(1+2*y))/f);
fy(log(2)/2)
%单精度指数运算多项分式逼近
syms x;
f=exp(x);
y=pade((f-1)/2,'Order',[1,4])
fy=matlabFunction((f-(1+2*y))/f);
fy(log(2)/2)
n=3;
a=sym('a',[1,n]);
v=x.^[1,2,4];
f=x/(exp(x)-1);
y=int((f-1-v*a.')^2,x,2^(-53),log(2)/2)+int((f-1-v*a.')^2,x,-log(2)/2,-2^(-53));
ret=vpasolve(jacobian(expand(y),a),a);
AA=struct2mat(ret);
A=double(AA)
fy=matlabFunction((x/f-x/(1+v*A))/(x/f));
fy(log(2)/2)
sy=matlabFunction(sqrt(y/log(2)),'Vars',{a});
sy(A.')

%单精度指数运算采用幂级数展开
syms x;
f=exp(x);
y=taylor(f,x,0,'Order',7)
fy=matlabFunction((f-y)/f);
fy(log(2)/2)
n=5;
a=sym('a',[1,n]);
v=x.^(2:n+1);
y=int(expand(((f-1-x-v*a.')/f)^2),x,-log(2)/2,log(2)/2);
ret=vpasolve(jacobian(y,a),a);
AA=struct2mat(ret);
A=double(AA)
fy=matlabFunction((f-1-x-v*A)/f);
fy(log(2)/2)
sy=matlabFunction(sqrt(y/log(2)),'Vars',{a});
sy(A.')


%对数运算采用atanh计算，但不用多项分式逼近
syms z;
x=(1+z)/(1-z);
f=atanh(z);%f=log(x)/2;
%z=(x-1)/(x+1);
y=pade((f-z)/(z^3),'Order',[6,8]);
fy=matlabFunction((f-(z+y*z^3))/f);
fy(1-2/(sqrt(2)+1))
%不采用直接展开
n=8;
syms x;
f=log(x);
a=sym('a',[1,n]);
v=(x-1).^(1:n);
y=int(expand((log(x)-sum(v.*a))^2),x,1/sqrt(2),sqrt(2));
ret=vpasolve(jacobian(y,a),a);
AA=struct2mat(ret);
A=double(AA)
fy=matlabFunction((f-v*A)/f);
fy(sqrt(2))
%采用换元幂级数展开
n=7;%双精度保证误差最小且足够
syms z;
x=(1+z)/(1-z);
f=atanh(z);%f=log(x)/2;
%z=(x-1)/(x+1);
a=sym('a',[1,n]);
v=z.^(3:2:2*n+1);
y=expand(int((f-z-v*a.')^2,z,-1+2/(1+sqrt(2)),1-2/(1+sqrt(2))));
ret=vpasolve(jacobian(y,a),a);
AA=struct2mat(ret);
A=double(AA)
fy=matlabFunction((f-z-v*A)/f);
fy(1-2/(1+sqrt(2)))
sy=matlabFunction(sqrt(int((f-z-v*a.')^2,z,-1+2/(1+sqrt(2)),1-2/(1+sqrt(2)))/(2-4/(1+sqrt(2)))),'Vars',{a});
sy(A.')

n=3;%单精度允许较多误差
syms z;
x=(1+z)/(1-z);
f=atanh(z);%f=log(x)/2;
%z=(x-1)/(x+1);
a=sym('a',[1,n]);
v=z.^(3:2:2*n+1);
y=expand(int((f-z-v*a.')^2,z,-1+2/(1+sqrt(2)),1-2/(1+sqrt(2))));
ret=vpasolve(jacobian(y,a),a);
AA=struct2mat(ret);
A=double(AA)
fy=matlabFunction((f-z-v*A)/f);
fy(1-2/(1+sqrt(2)))
fy(0.001241)
sy=matlabFunction(sqrt(int((f-z-v*a.')^2,z,-1+2/(1+sqrt(2)),1-2/(1+sqrt(2)))/(2-4/(1+sqrt(2)))),'Vars',{a});
sy(A.')


%反双曲正切
%当|x|<0.1811时使用幂级数展开，当|x|<0.5时使用公式缩减後计算，否则使用对数计算
syms z;
x=(1+z)/(1-z);
f=atanh(z);%f=log(x)/2;
%z=(x-1)/(x+1);
y=pade((f-z)/(z^3),'Order',[8,10]);
fy=matlabFunction((f-(z+y*z^3))/f);
fy(1-2/(sqrt(2)+1))
fy(0.5)

t=0x3fd671541846b9d8;
dis=10000;
z=-dis+t:1:dis+t;
z=sym(int2double(z),'f');
rz=atanh(z)*2^54;
rz=abs(double(rz-round(rz)));
[M,I]=min(rz)
sprintf('0x%x\n',double2int(z(I)))
ry=vpa(z(I),20)
r0=vpa(atanh(z(I)),20)
r1=vpa((1-2*z(I))/(2-z(I)),20)
r2=vpa((r1-z(I))/(1-r1*z(I)),20)
sprintf('0x%x\n',double2int(max(r1,-r2))) %p

n=3;%单精度允许较多误差
t=5033164/16777216;
syms z;
x=(1+z)/(1-z);
f=atanh(z);%f=log(x)/2;
%z=(x-1)/(x+1);
a=sym('a',[1,n]);
v=z.^(3:2:2*n+1);
y=expand(int((f-z-v*a.')^2,z,-t,t));
ret=vpasolve(jacobian(y,a),a);
AA=struct2mat(ret);
A=double(AA)
fy=matlabFunction((f-z-v*A)/f);
fy(t)
fy(0.308)
sy=matlabFunction(sqrt(int((f-z-v*a.')^2,z,-t,t)/(2*t)),'Vars',{a});
sy(A.')


%开平方根，使用快速平方倒数算法
%双精度
syms x d;%对x开方,初始误差为d,初值sqrt(x)*(1+d)
z=sqrt(x)*(1+d)/x;%z为平方根倒数的初值
dz=z*(1.5-0.5*x*z*z);%一阶迭代
dd=simplify((dz*x-sqrt(x))/sqrt(x));%一阶迭代後的误差
zd=matlabFunction(dd);
invd=3.4212812659e-02;%初始估值误差
k=6;%系数个数
a=sym('a',[1,k]);
h=@(z)(z.^(0:1:k-1))*a.';
fd=(1+d)*h((1+d)^2)-1;%方根倒数迭代误差
y=expand(int(fd^2,d,-invd,invd));
ret=vpasolve(jacobian(y,a),a);
AA=struct2mat(ret);
a=double(AA).';
h=@(z)(z.^(0:1:k-1))*a.';
fd=(1+d)*h((1+d)^2)-1;
gd=matlabFunction(fd);
vpa([AA(k);AA(1:k-1)/AA(k)],20) %第一次迭代系数
invd2=max([abs(gd(0)),abs(gd(invd)),abs(gd(-invd))]) %第一次迭代後误差
zd(invd2) % 最後迭代误差
%单精度
invd=3.4212837634e-02;%初始估值误差
k=3;%系数个数
a=sym('a',[1,k]);
h=@(z)(z.^(0:1:k-1))*a.';
fd=(1+d)*h((1+d)^2)-1;%方根倒数迭代误差
y=expand(int(fd^2,d,-invd,invd));
ret=vpasolve(jacobian(y,a),a);
AA=struct2mat(ret);
a=double(AA).';
h=@(z)(z.^(0:1:k-1))*a.';
fd=(1+d)*h((1+d)^2)-1;
gd=matlabFunction(fd);
vpa([AA(k);AA(1:k-1)/AA(k)],10) %第一次迭代系数
invd2=max([abs(gd(0)),abs(gd(invd)),abs(gd(-invd))]) %第一次迭代後误差
zd(invd2) % 最後迭代误差


%开n方根，使用快速开方根迭代算法，方根倒数估值原理如下：
首先只对正数方根倒数估值，设float2int(x)=t+m, t为阶码部分, m为尾数部分, e为浮点数1.0的阶码部分, p为尾数位数。
x=(1+m/2^p)*2^(t-e>>p).
估值算法为：rx=int2float(c-float2int(x)/n).
设q=(int)((t-e>>p)/n)<<p, r=t-e-q*n. => t-e=q*n+r, r<=(n-1<<p), r+m<(n<<p).
1/root(n,x)=1/root(n,1+m/2^p)*2^(-(t-e>>p)/n)=1/root(n,1+m/2^p)*2^(-(q>>p)-(r>>p)/n).
rx=int2float(c-(t+m)/n)=int2float(c-(e+q*n+r+m)/n), 设c=e+e/n+k, 则：
rx=int2float(e+k-q-(r+m)/n)=2^(-q>>p)*(1+(2^p+k-(r+m)/n)/2^p)/2, 2^p+k-(r+m)/n>=0.
1/root(n,x)≈2^(-q>>p)*2^(1-(r+m>>p)/n)/2.
使估值最优即：2+(k-(r+m)/n)/2^p≈2^(1-(r+m)/n/2^p).
令x=(r+m)/n/2^p, x in [0,1), w=k/2^p. 即为：2+w-x≈2^(1-x), x in [0,1+w].
误差评估函数为：经估计 -0.1<w<0
f(w)=abs((2^(1-x)-(2-x+w))/2^(1-x)), x in [0,1+w].
f(w)=abs((2^(2-x)-(3-x+w))/2^(2-x)), x in (1+w,1).
使用如下matlab代码求解w的最优值：
fd1(x)=(2^(1-x)-(2-x+w))/2^(1-x), x in [0,1+w].
fd2(x)=(2^(2-x)-(3-x+w))/2^(2-x), x in (1+w,1).
x1=solve(diff(fd1,x),x)≈0.5573+w in [0,1+w].
x2=solve(diff(fd2,x),x)≈1.5573+w not in (1+w,1).
经计算，当x=0或1时, f(w)=-w/2. 当x=1+w时, f(w)=1-2^w≈-w*log(2)>-w/2.
最优的w值使f(w)的两个极大值相等，即：fd1(1+w)==fd1(x1).
syms x w;
fd=@(x)(2^(1-x)-(2-x+w))/2^(1-x)
x1=solve(diff(fd,x),x)
ret=solve(abs(simplify(fd(x1)))==1-2^w)
vpa(ret)
f=@(w)(1-2^w)
vpa(f(ret))
解得：
ret=a·ln(2e/(e+2a)), a=1/ln2.
ret≈-0.0436774489.
误差为f(ret)≈0.02982120581.
故而最优的：c=e+e/n+k=e+e/n+w*2^p, e为浮点数1.0的阶码部分, p为尾数位数。
此时估值算法：1/root(n,x)≈rx=int2float(c-float2int(x)/n). 的误差接近3%，n越大越接近理论值。
当使用单精度浮点时，c=int32((1+1/n)*double(0x3f800000)+ret*2^23)
fn=@(n)sprintf('0x%x',int32((1+1/n)*double(0x3f800000)+ret*2^23))
当使用双精度浮点时：
fn=@(n)sprintf('0x%x',int64((1+1/n)*double(0x3ff0000000000000)+ret*2^52))
fnd=@(n,d)sprintf('0x%x',int64((1+1/n)*double(0x3ff0000000000000)+(double(d)-(1+1/n)*double(0x3f800000))*2^29))



%开立方根，使用快速开方根迭代算法，优化部分迭代系数：
%双精度
syms a d;
invd=3.4240570776e-02;
h=@(z)a*(4-z);
fd=simplify(expand((1+d)*h((1+d)^3)-1))
gd=matlabFunction(fd);
ret=solve([gd(a,invd)+gd(a,0)]);
invd1=max([abs(gd(ret,0)),abs(gd(ret,invd)),abs(gd(ret,-invd))]);
vpa(ret,20) %第一次迭代修改系数
double(invd1) %第一次迭代误差
k=3;%系数个数
a=sym('a',[1,k]);
h=@(z)(z.^(0:1:k-1))*a.';
fd=(1+d)*h((1+d)^3)-1;%方根倒数迭代误差
y=expand(int(fd^2,d,-invd1,invd1));
ret=vpasolve(jacobian(y,a),a);
AA=struct2mat(ret);
a=double(AA).';
h=@(z)(z.^(0:1:k-1))*a.';
fd=(1+d)*h((1+d)^3)-1;
gd=matlabFunction(fd);
invd2=max([abs(gd(fminbnd((@(d)-abs(gd(d))),-double(invd1),0))),...
  abs(gd(fminbnd((@(d)-abs(gd(d))),0,double(invd1)))),abs(gd(invd1)),abs(gd(-invd1))]);
vpa([AA(k);AA(1:k-1)/AA(k)],20) %第二次迭代系数
double(invd2) %第二次迭代误差
rtd=(1+invd2)^2-1
h=@(z)5/3-2/3*z
fd=simplify(expand((1+d)*h((1+d)^(3/2))-1))
gd=matlabFunction(fd);
double(min(gd(rtd),gd(-rtd))) %最後迭代误差
%单精度
invd=3.4240517765e-02;
k=3;%系数个数
syms d;
a=sym('a',[1,k]);
h=@(z)(z.^(0:1:k-1))*a.';
fd=(1+d)*h((1+d)^3)-1;%方根倒数迭代误差
y=expand(int(fd^2,d,-invd,invd));
ret=vpasolve(jacobian(y,a),a);
AA=struct2mat(ret);
a=double(AA).';
h=@(z)(z.^(0:1:k-1))*a.';
fd=(1+d)*h((1+d)^3)-1;
gd=matlabFunction(fd);
invd2=max([abs(gd(fminbnd((@(d)-abs(gd(d))),-double(invd),0))),...
  abs(gd(fminbnd((@(d)-abs(gd(d))),0,double(invd)))),abs(gd(invd)),abs(gd(-invd))]);
vpa([AA(k);AA(1:k-1)/AA(k)],10) %第二次迭代系数
double(invd2) %第二次迭代误差
rtd=(1+invd2)^2-1
h=@(z)5/3-2/3*z
fd=simplify(expand((1+d)*h((1+d)^(3/2))-1))
gd=matlabFunction(fd);
double(min(gd(rtd),gd(-rtd))) %最後迭代误差


圆函数计算：
三角函数是圆函数，通过缩减到较小区间进行计算。

%sine(x), x in [-pi/4,pi/4]
n=6;
fun=@(x)sin(x);
xfun=@(x)x.^2;
yfun=@(x,y)(y-x)./x.^3;
[dmax,dsum,Apq,derr]=funexprfit(fun,xfun,yfun,[n 0 200 0 sym(pi)/4]);
disp(dmax);disp(dsum);
vpae(Apq,20)
plot(derr);
[dmax,dsum,~,derr]=funexprfit(fun,xfun,yfun,[n 0 20000 0 sym(pi)/4],Apq,1);
disp(dmax);disp(dsum);
plot(derr);

%cose(x), x in [-pi/4,pi/4]
n=6;
fun=@(x)cos(x);
xfun=@(x)x.^2;
yfun=@(x,y)(y-1+x.^2/2)./x.^4;
[dmax,dsum,Apq,derr]=funexprfit(fun,xfun,yfun,[n 0 200 0 sym(pi)/4]);
disp(dmax);disp(dsum);
vpae(Apq,20)
plot(derr);
[dmax,dsum,~,derr]=funexprfit(fun,xfun,yfun,[n 0 20000 0 sym(pi)/4],Apq,1);
disp(dmax);disp(dsum);
plot(derr);
%计算2ulps下的拟合
n=5;
fun=@(x)cos(x);
xfun=@(x)x.^2;
yfun=@(x,y)(y-1+x.^2/2)./x.^4;
[dmax,dsum,Apq,derr]=funexprfit(fun,xfun,yfun,[-n 0 200 0 sym(pi)/4]);%16次
disp(dmax);disp(dsum);
vpae(Apq,20)
[dmax,dsum,~,derr]=funexprfit(fun,xfun,yfun,[n 0 20000 0 sym(pi)/4],Apq,1);
disp(dmax);disp(dsum);
plot(derr);

%tane(x), x in [-pi/4,pi/4]
[P Q]=deal(3,3);
fun=@(x)tan(x);
xfun=@(x)x.^2;
yfun=@(x,y)(y-x)./x.^3;
[dmax,dsum,Apq,derr]=funexprfit(fun,xfun,yfun,[P Q 200 0 sym(pi)/4]);
disp(dmax);disp(dsum);
vpae(Apq,20)
plot(derr);
[dmax,dsum,~,derr]=funexprfit(fun,xfun,yfun,[P Q 20000 0 sym(pi)/4],Apq,1);
disp(dmax);disp(dsum);
plot(derr)
%cote(x), x in [-pi/4,pi/4],可用于SIMD的算法
[P Q]=deal(3,3);
fun=@(x)cot(x);
xfun=@(x)x.^2;
yfun=@(x,y)(x.*y-1)./x.^2;
[dmax,dsum,Apq,derr]=funexprfit(fun,xfun,yfun,[P Q 200 0 sym(pi)/4]);
disp(dmax);disp(dsum);
vpae(Apq,20)
plot(derr);
[dmax,dsum,~,derr]=funexprfit(fun,xfun,yfun,[P Q 20000 0 sym(pi)/4],Apq,1,@(x,px,qx)(1+x.^2.*px./qx)./x);
disp(dmax);disp(dsum);
plot(derr);
[dmax,dsum,~,derr]=funexprfit(fun,xfun,yfun,[P Q 20000 0 sym(pi)/4],Apq,1,@(x,px,qx)1./x+x.*px./qx);
disp(dmax);disp(dsum);
plot(derr);
fun=@(x)tan(x);
xfun=@(x)x.^2;
yfun=@(x,y)(x./y-1)./x.^2;
[dmax,dsum,~,derr]=funexprfit(fun,xfun,yfun,[P Q 20000 0 sym(pi)/4],Apq,1,@(x,px,qx)x./(1+x.^2.*px./qx));
disp(dmax);disp(dsum);
plot(derr);

反三角函数是反圆函数，用多项分式逼近计算：

%asin(x), x in [-1/2,1/2]
syms x;
f=asin(x);
y=pade(f-x,'Order',[11,8])
[num,den]=numden(y);
num=coeffs(num)
den=coeffs(den)

[P Q]=deal(5,4);
fun=@(x)asin(x);
xfun=@(x)x.^2;
yfun=@(x,y)(y-x)./x.^3;
[dmax,dsum,Apq,derr]=funexprfit(fun,xfun,yfun,[P Q 200 0 sym(1/2)]);
disp(dmax);disp(dsum);
vpae(Apq,20)
plot(derr);
[dmax,dsum,~,derr]=funexprfit(fun,xfun,yfun,[P Q 20000 0 sym(1/2)],Apq,1);
disp(dmax);disp(dsum);
plot(derr)


%acos(x), x in [1/2,1]
syms z;
x=1-z*z;
f=acos(x);
y=pade(asin(z/sqrt(2))/(z/sqrt(2))-1,'Order',[10,8])
[num,den]=numden(y);
num=coeffs(num)
den=coeffs(den)
y=pade((2*asin(z/sqrt(2)))^2-2*z^2,'Order',[12,8])
[num,den]=numden(y);
num=coeffs(num)
den=coeffs(den)
%第一种计算方式,精度略低
[P Q]=deal(5,4);
fun=@(x)acos(x);
xfun=@(x)1-x;
yfun=@(x,y)(y./sqrt(2*(1-x))-1)./(1-x);
[dmax,dsum,Apq,derr]=funexprfit(fun,xfun,yfun,[P Q 200 sym(1/2) 1]);
disp(dmax);disp(dsum);
vpae(Apq,20)
plot(derr);
[dmax,dsum,~,derr]=funexprfit(fun,xfun,yfun,[P Q 20000 sym(1/2) 1],Apq,1,@(x,px,qx)sqrt(2*(1-x))+sqrt(2*(1-x)).*(1-x).*(px./qx));
disp(dmax);disp(dsum);
plot(derr);
%第二种计算方式,精度略高
[P Q]=deal(5,4);
fun=@(x)acos(x);
xfun=@(x)1-x;
yfun=@(x,y)(y.^2-2*(1-x))./(1-x).^2;
[dmax,dsum,Apq,derr]=funexprfit(fun,xfun,yfun,[P Q 200 sym(1/2) 1]);
disp(dmax);disp(dsum);
vpae(Apq,20)
plot(derr);
[dmax,dsum,~,derr]=funexprfit(fun,xfun,yfun,[P Q 20000 sym(1/2) 1],Apq,1,@(x,px,qx)sqrt(2*(1-x)+(1-x).^2.*(px./qx)));
disp(dmax);disp(dsum);
plot(derr);


%atan(x), x in [-p,p]
p=0.32491970802693366257;
syms x;
f=atan(x);
y=pade(f-x,'Order',[9,6])
fy=matlabFunction((f-x-y)/f);
fy(p)

p=0.32491970802693366257;
[P Q]=deal(4,3);
fun=@(x)atan(x);
xfun=@(x)x.^2;
yfun=@(x,y)(y-x)./x.^3;
[dmax,dsum,Apq,derr]=funexprfit(fun,xfun,yfun,[P Q 200 0 sym(p)]);
disp(dmax);disp(dsum);
vpae(Apq,20)
plot(derr);
[dmax,dsum,~,derr]=funexprfit(fun,xfun,yfun,[P Q 20000 0 sym(p)],Apq,1);
disp(dmax);disp(dsum);
plot(derr);

syms t y p q;
ret=solve([(y-p)/(1+p*y)==t;t==(p-t)/(1+p*t);t==(q-y)/(1+q*y);t==1/q],[t y p q]);
rx=struct2cell(ret);
rx=[rx{:}];
vpa(rx(4,:),20)
t=0.32491969623290632616
y=1.3763819204711735382
p=0.7265425280053608859
q=3.0776835371752534026

t=0x3fe73fd6208899e3;
dis=10000;
z=-dis+t:1:dis+t;
z=sym(int2double(z),'f');
ncores=feature('numcores');
fz=cell(1,ncores);
rz=cell(1,ncores);
[xz,idz]=distri2cell(z,ncores);
parfor ix = 1:ncores
    fz{ix}=vpa(atan(xz{ix})*2^53,32);
    rz{ix}=vpa(2*xz{ix}./(1-xz{ix}.^2)*2^51,32);
    fz{ix}=abs(double(fz{ix}-round(fz{ix})));
    rz{ix}=abs(double(rz{ix}-round(rz{ix})));
end
fz=cat(idz,fz{:});
rz=cat(idz,rz{:});
dz=max(fz,rz);
[M,I]=min(dz)
sp=z(I);
t=vpa((1-sp*sp)/(2*sp),20)
y=vpa(1/sp,20)
p=vpa(sp,20)
q=vpa(2*sp/(1-sp*sp),20)
atgp=vpa(atan(sp),20)
atgq=vpa(atan(2*sp/(1-sp*sp)),20)
max([t,(y-p)/(1+p*y),(p-t)/(1+p*t),(q-y)/(1+q*y),1/q])

mindz=3.040263648147222e-04
t=0.32491968837022148064
y=1.3763819101787854806
p=0.72654253343834251933
q=3.0776836116516750329
atgp=0.62831853427389128265
atgq=1.2566370685477825653
maxt=0.32491970802693366257

